!/bin/bash

#========================================================================================#
#                                Z80-Pack Installation Script                            #
#========================================================================================#
#                                                                                        #
# This script automates the installation of the Z80Pack system emulators and additional  #
# software. Z80Pack provides emulation for a number of 8-bit systems, including all      #
# versions of CP/M, UCSD p-System, Altair, Cromemco and IMSAI computer systems, and      #
# supported operating systems.                                                           #
#                                                                                        #
# In addition to the operating systems, the Z80Pack website makes available a large      #
# selection of software which can be downloaded and installed. In addition to choosing   #
# the emulator(s) you wish to install (CP/Msim, Cromemcosim, Altairsim and/or IMSAIsim), #
# a series of menus allow youto choose additional software.                              #
#                                                                                        #
# NOTE that this script does not check for the presence of already installed software,   #
# and so will overwrite anything you've already god in place. Please be advised to backup#
# your work first.                                                                       #
#----------------------------------------------------------------------------------------#
# 2020.03-12 Added initial warning.
#            Added [ ! -z ] test to "unrecognized version" message
#            Yet more bug fixes to launch script update code; some day I'll get it right
#            Added script called "boot" to the the altair additions script update for loop.
#            Split out imsai_additional into groups
#            Added alternate dependency list for Alpine Linux and dependency check code for
#            apk package manager. Untested.
#            Added description at top of comments section.
# 2020.03-11 Massive rewrites throughout.
# 2020-02-20 Updated libjpeg8-dev to libjpeg62-turbo-dev
#            Some distros don't have git, wget, sudo; added to dependencies check
# 2019.12.16 Added dependencies check
# 2019.10.25

# DEPENDENCIES:
# Building Z80Pack and its components requires the following. Run "sudo apt-get update"
# then install components with "sudo apt-get install".
#
# sudo                # A minimal Debian config may not have sudo
# wget                # some minimal distros don't include these
# git                 # to fetch dev version 
# build-essential     # includes dpkg-dev g++ gcc make libc6-dev (or libc-dev) 
                      # g++ needed for frontpanel build
# libjpeg62-turbo-dev # for jinclude.h (used to be libjpeg8-dev)
# libx11-dev          # for X11/Xlib.h
# mesa-common-dev     # GL/gl.h (OpenGL) for frontpile build
# libglu1-mesa-dev    # GL/glu.h (OpenGL)
# freeglut3-dev       # GL/glu.h (OpenGL)
# libxmu-dev          # ld -lXmu fails
# socat               # Used by imsaisim for its virtual modem

# # VARIABLES: 

# The version of Z80Pack to be installed. At this time v1.36 is the most recent. Possible values include
# 1.20, 1.21 ... 1.36 (earlier versions have not been tested); "master" or "latest" for whatever the most 
# recent version at Github is; or "dev" to grab the current development branch at Github. Defaults to 
# "master".

  zver=master         # Default if nothing is specified on the command line.
  case $1 in          # split into separate cases just for ease of reading
    1.10|1.11|1.12|1.13|1.14|1.15|1.16|1.17|1.18|1.19) zver=$1 ;;
    1.20|1.21|1.22|1.23|1.24|1.25|1.26|1.27|1.28|1.29) zver=$1 ;;
    1.30|1.31|1.32|1.33|1.34|1.35|1.36)                zver=$1 ;;
    dev|master|latest)                                 zver=$1 ;;
  esac

  zroot=$(pwd)        # where to put z80pack-x.yy/; default to current dir
  zloc=$zroot/z80pack-$zver
  osenv=linux         # Your operating environment; one of linux, cygwin, osx, solaris or bsd;
                      # als "alpine", which will be reset to "linux" after dependency check
  sharedlib=/usr/lib  # a shared library directory on your system; libfrontpanel.so goes here

  # Dependencies can vary from system to system.
  
  # Alpine Linux. But I don't yet know a way to check whether a package is already installed on Alpine Linux.
  #  dependencies="bash joe sudo git wget dpkg-dev g++ gcc make libc-dev mesa-dev libjpeg-turbo-dev libxmu-dev libx11-dev glu-dev socat tmux"
  case osenv in
    alpine)
      dependencies="bash joe sudo git wget dpkg-dev g++ gcc make libc-dev mesa-dev libjpeg-turbo-dev libxmu-dev libx11-dev glu-dev socat tmux"
      osenv=linux     # now reset to linux
      ;;
    *)
      dependencies="sudo wget git build-essential libjpeg8-dev libx11-dev mesa-common-dev libglu1-mesa-dev freeglut3-dev libxmu-dev socat"
      ;;
  esac

# ERRORS:
#
# If you encounter either or both of these errors:
#
#   Cannot access auxout
#   Compile the tools dude!
#
# Make sure you have ~/bin in the path and cpmsim.aux* properly chmodded:
#
#   PATH=$PATH:/home/yourhomedir/bin; export PATH
#   chmod +777 /tmp/.z80pack/cpmsim.aux*
#
# Also make sure you add the path command to your ~/.bash_profile
#
# -------------------------- End of configuration area. -------------------------- 

function params {
  # default values are set at the top of this script; you may specify
  # a different version from the command line, e.g.: zpack-install 1.34
  case $1 in
    dev)
        zver=dev
        zloc=$zroot/z80pack
        ;;
    1.8|1.9)
        zver=$1
        zloc=$zroot/z80pack-$zver
        ;;

    # The following could be combined into a single case statement; this
    # is just more legible.

    1.10|1.11|1.12|1.13|1.14|1.15|1.16|1.17|1.18|1.19)
        zver=$1
        zloc=$zroot/z80pack-$zver
        ;;
    1.20|1.21|1.22|1.23|1.24|1.25|1.26|1.27|1.28|1.29)
        zver=$1
        zloc=$zroot/z80pack-$zver
        ;;
    1.30|1.31|1.32|1.33|1.34|1.35|1.36|1.37)
        zver=$1
        zloc=$zroot/z80pack-$zver
        ;;
    *)
        [ ! -z $1 ] && echo "Unrecognized version. Using default $zver."
  esac
}

# ======================================================================================= #
#                                                                                         #
#                     COMPONENT AND SOFTWARE INSTALLATION PROCEDURES                      #
#                                                                                         #
# ======================================================================================= #

function update-script {
  [ -f $1 ] && {
    echo "Updating script: $1"
    sed -i 's|bin/sh|bin/bash|g' $1
    sed -i 's|\.cpm|\.dsk|g' $1
    sed -i 's|\./format|mkdskimg|g' $1
#   Discovered a script ("boot" in altairsim) where the simcmd doesn't begin in col 1, so can't use this code.
#    simcmd=$(grep ^./ $1)
#    sed -i 's|^./|#./|' $1
#   Make sure all other ./ code, such as replacing ./format, runs before this.
    simcmd=$(grep ./ $1)     # no "/g", so grabs first instance only.
    sed -i 's|./|#./|' $1    # ditto

    #---- ZPack_OS mods
    echo "" >> $1
    echo "#---- ZPack_OS mods" >> $1
    echo "simcmd='$simcmd'" >> $1
    echo "[ -f ./zpack_os ] && . ./zpack_os" >> $1
    echo "\$simcmd" >> $1
  }
}

function inst () { 

  # If for some reason the user decides to install packs w/o having
  # installed Z80Pack or into a location where Z80Pack hasn't been 
  # installed, make sure the dirs exist.

  mkdir -p $zloc/cpmsim/disks/library 
  mkdir -p $zloc/cpmsim/disks/backups
  cd $zloc/cpmsim

  wget https://www.autometer.de/unix4fun/z80pack/ftp/$1 && tar -xvf $1 && rm $1 

  cp -u -r disks/library/* disks/backups/

  echo " "
  echo "+-------------------------------+"
  echo " Installing $1"
  echo " "
  echo " Command(s) available: "
  
  # Update script files:
  for s in $2 $3 $4 $5 $6; do update-script $s; done

  echo "+-------------------------------+"
  echo " "

  cd -
}

function menu1 {
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|       Disk images with Digital Research OS sources       |"
    echo "|                                                          |"
    echo "| A) CP/M 2.0 source disk images with boot dsk bld scripts |"
    echo "| B) CP/M 2.2 source disk images with boot dsk bld scripts |"
    echo "| C) CP/M 2.2 src dsk, patches; tools are on A) or B) above|"
    echo "| D) CP/M 3 source disk images with build scripts          |"
    echo "| E) MP/M 2 source disk images with build scripts          |"
    echo "|                                                          |"
    echo "| Z) All the above                                         |"
    echo "+----------------------------------------------------------+"
    read -p "Choose a component to install (Q to return): " a

    case $a in
      A|a) inst cpm20src.tgz     cpm20src                         ;;
      B|b) inst cpm22src.tgz     cpm22src                         ;;
      C|c) inst cpm22src-pat.tgz cpm22srcp                        ;;
      D|d) inst cpm3src.tgz      cpm3src-p1 cpm3src-p2 cpm3src-p3 ;;
      E|e) inst mpmsrc.tgz       mpmsrc                           ;;
      Z|z) inst cpm20src.tgz     cpm20src
           inst cpm22src.tgz     cpm22src
           inst cpm22src-pat.tgz cpm22srcp
           inst cpm3src.tgz      cpm3src-p1 cpm3src-p2 cpm3src-p3
           inst mpmsrc.tgz       mpmsrc                           ;;
      Q|q) break ;;
      *) ;;
    esac
  done
}
    
function menu2 {
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|        CP/NET client and server boot disk images         |"
    echo "|                                                          |"
    echo "| A) Preconf'd CP/NET 1.0 MP/M server, customized sources  |"
    echo "| B) Preconf'd CP/NET 1.0 CP/M 2.2 client, cust sources    |"
    echo "| C) Preconf'd CP/NET 1.1 MP/M server, customized sources  |"
    echo "| D) Preconf'd CP/NET 1.1 CP/M 2.2 client, cust sources    |"
    echo "| E) Preconf'd CP/NET 1.2 MP/M server, customized sources  |"
    echo "| F) Preconf'd CP/NET 1.2 CP/M 2.2 client, cust sources    |"
    echo "|                                                          |"
    echo "| Z) All the above                                         |"
    echo "+----------------------------------------------------------+"
    read -p "Choose a component to install (Q to return): " a

    case $a in
      A|a) inst mpm-net-1.0.tgz  mpm-net0  ;;
      B|b) inst cpm2-net-1.0.tgz cpm2-net0 ;;
      C|c) inst mpm-net-1.1.tgz  mpm-net1  ;;
      D|d) inst cpm2-net-1.1.tgz cpm2-net1 ;;
      E|e) inst mpm-net-1.2.tgz  mpm-net2  ;;
      F|f) inst cpm2-net-1.2.tgz cpm2-net2 ;;
      Z|z) inst mpm-net-1.0.tgz  mpm-net0
           inst cpm2-net-1.0.tgz cpm2-net0
           inst mpm-net-1.1.tgz  mpm-net1
           inst cpm2-net-1.1.tgz cpm2-net1
           inst mpm-net-1.2.tgz  mpm-net2
           inst cpm2-net-1.2.tgz cpm2-net2 ;;
      Q|q) break ;;
      *) ;;
    esac
  done
}

function menu3 {
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|   Bootable disk images with Older CP/M bootable disks    |"
    echo "|                                                          |"
    echo "| A) 1975 CP/M version bootable image; sources see below   |"
    echo "| B) CP/M 1.3 bootable image, incl boot ldr, BIOS sources  |"
    echo "| C) CP/M 1.4 bootable image, incl boot ldr, BIOS sources  |"
    echo "|                                                          |"
    echo "| Z) All the above                                         |"
    echo "+----------------------------------------------------------+"
    read -p "Choose a component to install (Q to return): " a

    case $a in
      A|a) inst cpm1975.tgz cpm1975 ;;
      B|b) inst cpm13.tgz   cpm13   ;;
      C|c) inst cpm14.tgz   cpm14   ;;
      Z|z) inst cpm1975.tgz cpm1975 
           inst cpm13.tgz   cpm13
           inst cpm14.tgz   cpm14   ;;
      Q|q) break ;;
      *) ;;
    esac
  done
}
    
function menu4 {
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|        Variant CP/M configuration bootable images        |"
    echo "|                                                          |"
    echo "| A) 63K CP/M 2.2; check vectors for i:, j: HD protection  |"
    echo "| B) CP/M 3 8080 ver; chk vectrs for i:, j: HD corrupt prot|"
    echo "|                                                          |"
    echo "| Z) All the above                                         |"
    echo "+----------------------------------------------------------+"
    read -p "Choose a component to install (Q to return): " a

    case $a in
      A|a) inst cpm63k.tgz              ;;
      B|b) inst cpm3-8080.tgz cpm3-8080 ;;
      Z|z) inst cpm63k.tgz 
           inst cpm3-8080.tgz cpm3-8080 ;;
      Q|q) break ;;
      *) ;;
    esac
  done
}
    
function menu5 {
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|          Disk images with UCSD p-System for Z80          |"
    echo "|                                                          |"
    echo "| A) CP/M 2.2, boot record bld srcs p-Sys I.4, I.5, II.0.  |"
    echo "| B) p-Sys I.4 Z80 boot sys dsk, VT-100, ANSI terminals    |"
    echo "| C) p-Sys I.5 Z80 boot sys dsks, VT-100, ANSI terminals   |"
    echo "| D) p-Sys II.0 Z80 boot sys dsks, VT-100, ANSI terminals  |"
    echo "| E) p-Sys IV.0 Z80 boot sys dsks, VT-100, ANSI terminals  |"
    echo "| F) p-Sys I.5 for Z80, 8in images                         |"
    echo "| G) Modded p-Sys I.5 p-code interpreter sources           |"
    echo "| H) p-Sys II.0 for Z80, 8in imgs, repaired bitsavers imgs |"
    echo "| I) Modded p-Sys II.0 p-code interpreter sources          |"
    echo "| J) p-Sys IV.0 p-code interpreter objects                 |"
    echo "|                                                          |"
    echo "| Z) All the above                                         |"
    echo "+----------------------------------------------------------+"
    read -p "Choose a component to install (Q to return): " a

    case $a in
      A|a) inst ucsd-booter.tgz    ucsd-booter ;;
      B|b) inst ucsd-i4.tgz            ucsd-i4 ;;
      C|c) inst ucsd-i5.tgz            ucsd-i5 ;;
      D|d) inst ucsd-ii.tgz            ucsd-ii ;;
      E|e) inst ucsd-iv.tgz            ucsd-iv ;;
      F|f) inst ucsd-i5-disks.tgz              ;;
      G|g) inst ucsd-i5-interp.tgz             ;;
      H|h) inst ucsd-ii-disks.tgz              ;; 
      I|i) inst ucsd-ii-interp.tgz             ;;
      J|j) inst ucsd-iv-interp.tgz             ;;
      Z|z) inst ucsd-booter.tgz    ucsd-booter
           inst ucsd-i4.tgz            ucsd-i4
           inst ucsd-i5.tgz            ucsd-i5
           inst ucsd-ii.tgz            ucsd-ii
           inst ucsd-iv.tgz            ucsd-iv
           inst ucsd-i5-disks.tgz 
           inst ucsd-i5-interp.tgz 
           inst ucsd-ii-disks.tgz 
           inst ucsd-ii-interp.tgz  
           inst ucsd-iv-interp.tgz             ;;
      Q|q) break ;;
      *) ;;
    esac
  done
}
 
function menu6 {
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|             Other 8080/Z80 operating systems             |"
    echo "|                                                          |"
    echo "| A) CP/M 2.2 ZCPR1, all sources and documentation         |"
    echo "| B) CP/M 2.2 ZSDOS/ZCPR1, all sources and docs            |"
    echo "| C) Preconf'd NZ-COM ZSDOS/ZCPR3.4 CP/M 2.2, incl docs    |"
    echo "| D) CP/M 2.2 Z80CCP, incl source                          |"
    echo "| E) QP/M prebuilt bootable image                          |"
    echo "| F) DOS+ prebuilt bootable image                          |"
    echo "| G) ConIX HD img preinstalled for CP/M 2.2                |"
    echo "| H) MicroShell, UNIX-like features for CP/M               |"
    echo "| I) Microtools, other UNIX-like utils for CP/M            |"
    echo "| J) FUZIX preinstalled; work in progress                  |"
    echo "|                                                          |"
    echo "| Z) All the above                                         |"
    echo "+----------------------------------------------------------+"
    read -p "Choose a component to install (Q to return): " a

    case $a in
      A|a) inst zcpr1.tgz      zcpr1   ;;
      B|b) inst zsdos.tgz      zsdos   ;;
      C|c) inst nzcom.tgz      nzcom   ;;
      D|d) inst z80ccp.tgz     z80ccp  ;;
      E|e) inst qpm.tgz        qpm     ;;
      F|f) inst dosplus.tgz    dosplus ;;
      G|g) inst conix.tgz              ;;
      H|h) inst microshell.tgz         ;;
      I|i) inst microtools.tgz         ;;
      J|j) inst fuzix.tgz      fuzix   ;;
      Z|z) inst zcpr1.tgz      zcpr1
           inst zsdos.tgz      zsdos
           inst nzcom.tgz      nzcom
           inst z80ccp.tgz     z80ccp
           inst qpm.tgz        qpm
           inst dosplus.tgz    dosplus
           inst conix.tgz 
           inst microshell.tgz 
           inst microtools.tgz 
           inst fuzix.tgz      fuzix   ;;
      Q|q) break ;;
      *) ;;
    esac
  done
}
    
function menu7 {
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|    Disk images with CP/M application software, Menu 1    |"
    echo "|                                                          |"
    echo "| A) Word-Master 1.07 orig files, asm patch srcs, var terms|"
    echo "| B) Vedit 1.34, conf'd binary for ANSI term, cursor keymap|"
    echo "| C) WordStar 3.3, conf'd for VT-100 terminal              |"
    echo "| D) WordStar 4.0 HD img, conf'd for VT-100 terminal       |"
    echo "| E) ZDE 1.6, conf'd binary for ANSI term, cursor keymap   |"
    echo "| F) Complete ISIS tools, submit scrp to compile PL/M progs|"
    echo "| G) Microsoft Fortran-80 compiler version 3.44            |"
    echo "| H) PaloAlto Tinybasic src and exec w/SAVE & LOAD for CP/M|"
    echo "| I) Eubanks BASIC-E compilr srcs, bld scrp, BASIC examples|"
    echo "| J) XYBASIC sources HD img, bld scrp, executables         |"
    echo "| K) LLL Basic interpreter, Dr. Dobbs 1977, srcs, exes     |"
    echo "| L) MS BASIC Rev4.51, BASIC-80 Rev5.21, BASIC-85 Rev5.29  |"
    echo "| M) Microsoft Basic compiler 5.3                          |"
    echo "| N) DRI CBASIC 2, CB80 2.0 Basic compiler, GSX-80 graphics|"
    echo "| O) DRI GSX-80 v1.0 Graphics Extension                    |"
    echo "| P) DRI GSX-80 v1.1 Graphics Extension                    |"
    echo "| R) GSX-80 example programs in various programming langs  |"
    echo "| S) GSX-80 attached to mbasic interp; example BASIC progs |"
    echo "| T) DRI's DR Graph application, a chart tool using GSX-80 |"
    echo "| U) DRI's DR Draw application, a drawing tool using GSX-80|"
    echo "| V) ALGOL-M compiler for CP/M                             |"
    echo "|                                                          |"
    echo "| Z) All the above                                         |"
    echo "+----------------------------------------------------------+"
    read -p "Choose a component to install (Q to return): " a

    case $a in
      A|a) inst wm.tgz                 ;;
      B|b) inst vedit.tgz              ;;
      C|c) inst ws33.tgz               ;;
      D|d) inst ws40.tgz               ;;
      E|e) inst zde.tgz                ;;
      F|f) inst isis.tgz      isis     ;;
      G|g) inst f80-344.tgz            ;;
      H|h) inst tinybasic.tgz          ;;
      I|i) inst basice.tgz             ;;
      J|j) inst xybasic.tgz            ;;
      K|k) inst lllbasic.tgz  lllbasic ;;
      L|l) inst mbasic.tgz             ;;
      M|m) inst bascom.tgz             ;;
      N|n) inst cb80.tgz               ;;
      O|o) inst gsx80-1.0.tgz          ;;
      P|p) inst gsx80-1.1.tgz          ;;
      R|r) inst gsxprg.tgz             ;;
      S|s) inst gsxbasic.tgz           ;;
      T|t) inst drgraph.tgz            ;;
      U|u) inst drdraw.tgz             ;;
      V|v) inst algol-m.tgz   algol    ;;
      Z|z) inst wm.tgz 
           inst vedit.tgz 
           inst ws33.tgz 
           inst ws40.tgz 
           inst zde.tgz 
           inst cb80.tgz 
           inst f80-344.tgz 
           inst tinybasic.tgz 
           inst basice.tgz 
           inst xybasic.tgz
           inst mbasic.tgz 
           inst bascom.tgz 
           inst gsx80-1.0.tgz 
           inst gsx80-1.1.tgz 
           inst gsxprg.tgz 
           inst gsxbasic.tgz 
           inst drgraph.tgz 
           inst drdraw.tgz
           inst isis.tgz      isis 
           inst lllbasic.tgz  lllbasic 
           inst algol-m.tgz   algol    ;;
      Q|q) break ;;
      *) ;;
    esac
  done
}

function menu8 {
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|    Disk images with CP/M application software, Menu 2    |"
    echo "|                                                          |"
    echo "| A) Starkweather 8080 Pilot interp, Dr. Dobbs 77, srcs    |"
    echo "| B) Comal-80 Rev. 2.10 for CP/M, VT-100/ANSI terminals    |"
    echo "| C) Z80MR macro assembler                                 |"
    echo "| D) figFORTH 1.1, 1.3 for 8080, editor, 8080 assembler    |"
    echo "| E) CP/M FORTH implementations using filesys as block dev |"
    echo "| F) Turbo Pascal 3.01A; ANSI terminal                     |"
    echo "| G) Q/C C compiler version 3.1a for Z80                   |"
    echo "| H) C/80 C compiler version 3.1 for 8080, HD img          |"
    echo "| I) Z80 Hitech-C V3.09, conf'd to run from J:             |"
    echo "| J) Kermit 4.11 build for cpmsim TCP/IP UART              |"
    echo "| K) CP/M 3 sys extensions, e.g. multiline command history |"
    echo "| L) CP/M help system 2.0, conf'd to use drive J:          |"
    echo "| M) Colossal Cave adventure, version A02, 350 points      |"
    echo "| N) A02 src for MSFortran-80/CPM, Cromemco Fortran IV/CDOS|"
    echo "| O) Colossal Cave adventure, version B00, 550 points. Z80 |"
    echo "| P) Colossal Cave adventure, version B01, 550 points. 8080|"
    echo "| R) Colossal Cave adventure, version B03, 580 points      |"
    echo "| S) Rogue 1.7 and Wanderer 2.2; QTERM patch VT-100/ANSI   |"
    echo "| T) Nemesis and Dungeon Master rpg; ANSI terminals        |"
    echo "| U) Infocom Planetfall, Hitchhikers Guide; ANSI terminals |"
    echo "| V) CP/M Chess programs                                   |"
    echo "|                                                          |"
    echo "| Z) All the above                                         |"
    echo "+----------------------------------------------------------+"
    read -p "Choose a component to install (Q to return): " a

    case $a in
      A|a) inst pilot.tgz       pilot ;;
      B|b) inst comal.tgz       comal ;;
      C|c) inst z80mr.tgz             ;;
      D|d) inst fig80.tgz       fig80 ;;
      E|e) inst forth.tgz             ;;
      F|f) inst tp301a.tgz      tp    ;;
      G|g) inst qc31a.tgz             ;;
      H|h) inst c80.tgz         c80   ;;
      I|i) inst hd-htc.tgz            ;;
      J|j) inst kermit.tgz            ;;
      K|k) inst cpm3tools.tgz         ;;
      L|l) inst help.tgz              ;;
      M|m) inst adv-a02.tgz           ;;
      N|n) inst adv-a02-src.tgz       ;;
      O|o) inst adv-b00.tgz           ;;
      P|p) inst adv-b01.tgz           ;;
      R|r) inst adv-b03.tgz           ;;
      S|s) inst rogue.tgz             ;;
      T|t) inst nemesis.tgz           ;;
      U|u) inst infocom.tgz           ;;
      V|v) inst chess.tgz             ;;
      Z|z) inst pilot.tgz       pilot
           inst comal.tgz       comal
           inst fig80.tgz       fig80
           inst tp301a.tgz      tp
           inst c80.tgz         c80
           for a in z80mr.tgz forth.tgz qc31a.tgz hd-htc.tgz kermit.tgz cpm3tools.tgz help.tgz adv-a02.tgz adv-a02-src.tgz adv-b00.tgz adv-b01.tgz adv-b03.tgz rogue.tgz nemesis.tgz infocom.tgz chess.tgz; do inst $a; done ;;
      Q|q) break              ;;
      *)                      ;;
    esac
  done
}

function menu9 {
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|   Disk images with UCSD p-System application software    |"
    echo "|                                                          |"
    echo "| A) Colossal Cave, 500 pts, srcs. Tested with II.0.       |"
    echo "| B) Startrek. Too large for I.5, II.0, tested with IV.0.  |"
    echo "| C) Blackjack, Othello, Chase. Tested with II.0.          |"
    echo "| D) Bowles Database Homework Proj for II.0. Not completed.|"
    echo "|                                                          |"
    echo "| Z) All the above                                         |"
    echo "+----------------------------------------------------------+"
    read -p "Choose a component to install (Q to return): " a

    case $a in
      A|a) inst ucsd-adventure.tgz ;;
      B|b) inst ucsd-startrek.tgz ;;
      C|c) inst ucsd-games.tgz ;;
      D|d) inst ucsd-kbdb.tgz ;;
      Z|z) inst ucsd-adventure.tgz 
           inst ucsd-startrek.tgz 
           inst ucsd-games.tgz 
           inst ucsd-kbdb.tgz ;;
      Q|q) break              ;;
      *)                      ;;
    esac
  done
}

function otherstuff {
#  cd $zloc/cpmsim
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|                        CATEGORIES                        |"
    echo "| A) Disk images with Digital Research OS sources          |"
    echo "| B) CP/NET client and server boot disk images             |"
    echo "| C) Bootable disk images with Older CP/M bootable disks   |"
    echo "| D) Variant CP/M configuration bootable images            |"
    echo "| E) Disk images with UCSD p-System for Z80                |"
    echo "| F) Other 8080/Z80 operating systems                      |"
    echo "| G) Disk images with CP/M application software, Menu 1    |"
    echo "| H) Disk images with CP/M application software, Menu 2    |"
    echo "| I) Disk images with UCSD p-System application software   |"
    echo "+----------------------------------------------------------+"
    read -p "Choose a component category (Q to exit): " a

    case $a in
      A|a) menu1 ;;
      B|b) menu2 ;;
      C|c) menu3 ;;
      D|d) menu4 ;;
      E|e) menu5 ;;
      F|f) menu6 ;;
      G|g) menu7 ;;
      H|h) menu8 ;;
      I|i) menu9 ;;
      Q|q) break ;;
      *) ;;
    esac
  done
}

# ======================================================================================= #
#                                                                                         #
#                            Z80PACK INSTALLATION PROCEDURES                              #
#                                                                                         #
# ======================================================================================= #

function check_dependencies() {
  unset missing

  echo " "
  echo "---------------------------"
  echo "Testing for dependencies..."
  echo "---------------------------"
  echo " "

  for dependency in $dependencies ; do
    echo $dependency
    case osenv in
      alpine)
        apk info | grep $dependency 2>/dev/null || missing=$missing$dependency" "
        ;;
      *)
        dpkg -S $dependency >/dev/null 2>/dev/null || missing=$missing$dependency" "
        ;;
    esac
  done

  if [[ ! -z "$missing" ]]; then
    echo "-------------------------------------------------------------------------------"
    echo "ERROR: Some dependencies are missing. They must be installed before continuing."
    echo "       They may be installed with one of the following commands:               "
    echo "                                                                               "
    echo "       sudo apt-get install $missing                                           "
    echo "       apk add $missing                                                        "
    echo "                                                                               "
    echo " **** Z80Pack installation is not complete. ****                               "
    echo "-------------------------------------------------------------------------------"

    exit 1
  fi
  echo " "
  echo "All dependencies are satisfied! Continuing..."
  echo " "
}

function getzpack {
# Obtain and unpack Z80Pack
  echo " ------------------------------ "
  echo "    Fetching Z80Pack $zver       "
  echo " ------------------------------ "

  case $zver in
    dev|master|latest)
      git clone https://github.com/udo-munk/z80pack.git
      [ "$zver" = "dev" ] && { cd z80pack; git checkout dev; cd ..; }
      mv z80pack z80pack-$zver
      ;;
    1.10|1.11|1.12|1.13|1.14|1.15|1.16|1.17|1.18|1.19|1.20|1.21|1.22|1.23|1.24|1.25|1.26|1.27|1.28|1.29|1.30|1.31|1.32|1.33|1.34|1.35|1.36)
      mkdir -p $zroot; cd $zroot
      wget https://www.autometer.de/unix4fun/z80pack/ftp/z80pack-$zver.tgz
      tar xvf z80pack-$zver.tgz
      rm z80pack-$zver.tgz
      cd $zloc
      ;;
  esac
}

function getcpmtools {
  echo " ------------------------------ "
  echo "    Fetching CP/M Tools 2.20    "
  echo " ------------------------------ "

  mkdir -p cpmtools; cd cpmtools
  wget http://www.moria.de/~michael/cpmtools/files/cpmtools-2.20.tar.gz
  tar xzvf cpmtools-2.20.tar.gz
  rm cpmtools-2.20.tar.gz
  cd $zloc
}

function cpmsim_additional { 
  mkdir -p $zloc/cpmsim/; cd $zloc/cpmsim
  wget http://www.viara.eu/download/td130-1.01.tar.gz
  tar -xvf td130-1.01.tar.gz
  rm td130-1.01.tar.gz
  rm td130m
  rm td130s
  rm td130

  mkdir -p conf/library
  cat > conf/library/td130m.conf <<EOL
# Network client configuration for TurboDOS
#
1               0               4040
2               0               4042
3               0               4044
4               0               4046
EOL

  cat > conf/library/td130s.conf <<EOL
# Network server configuration for TurboDOS
#
1        127.0.0.1              4040 
EOL

  cat > td130m <<EOL
#!/bin/sh

rm -f disks/drive[ai].dsk
ln disks/library/td130-1.dsk disks/drivea.dsk
ln disks/library/td130-2.dsk disks/drivei.dsk
rm conf/*.conf
ln conf/library/td130m.conf conf/net_server.conf

./cpmsim
EOL
chmod +x td130m

  cat > td130s <<EOL
#!/bin/sh

rm -f disks/drive[ai].dsk
ln disks/library/td130-1.dsk disks/drivea.dsk
ln disks/library/td130-2.dsk disks/drivei.dsk
rm conf/*.conf
ln conf/library/td130s.conf conf/net_client.conf

./cpmsim
EOL
chmod +x td130s

  # Update scripts
  for a in td130m td130s ; do update-script $a; done

cd $zloc
}

function altair_additional {
  
  # Install additional
  source="https://www.autometer.de/unix4fun/z80pack/ftp/altair"
  
  mkdir -p $zloc/altairsim/; cd $zloc/altairsim/

  # these could all be combined into a single for loop; grouping them allows progress reports like "Fetching BASIC software"
  
  echo " "
  echo "--------------------------------------"
  echo "Fetching Standalone BASIC interpreters"
  echo "--------------------------------------"
  echo " "
  for mits in basic4k10 basic4k32 basic4k40 basic8k32 basic8k40 basicex40 basicex41 basicex41-rom basicdisk50 vdmdrv tinybasic-1.0 tinybasic-2.0 xybasic basic8k78; do
     wget -r -l1 -np -nd "$source" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
  done
  
  echo " "
  echo "------------------------------------"
  echo "Fetching Various standalone software"
  echo "------------------------------------"
  echo " "
  for mits in killbits turnmon soft1 als8-rom mbl microchess kscope life dazzlechess vdm1 vdm2 vdm3 cuter-mits; do
     wget -r -l1 -np -nd "$source" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo " "
  echo "-------------------------------------"
  echo "Fetching Standalone Software from TDL"
  echo "-------------------------------------"
  echo " "
  for mits in apple zapple umzapex tdl8kbas tdl12kbas; do
     wget -r -l1 -np -nd "$source" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done
  
  echo " "
  echo "----------------------------------"
  echo "Fetching CP/M software for Tarbell"
  echo "----------------------------------"
  echo " "
  for mits in miniboot bootromt cpm13 cpm14 cpm14-vdm cpm22 cpm22-vdm xmodem vdm-stuff tdlsoft; do
     wget -r -l1 -np -nd "$source" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo " "
  echo "------------------------------------"
  echo " Software for MITS (req. ZPack 1.37)"
  echo "------------------------------------"
  echo " "
  for mits in dbl mits-cpm14 mits-cpm22 mits-cpm-tools mits-cpm-ws30 mits-basic40 mits-basic50 mits-dos; do
     wget -r -l1 -np -nd "$source" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo " "
  echo "--------------------------"
  echo " UCSD p-System for Tarbell"
  echo "--------------------------"
  echo " "
  for mits in ucsd-booter ucsd-i5 ucsd-i5-interp; do
     wget -r -l1 -np -nd "$source" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done
  rm robots.*; rm *.prn; rm *.1; rm *.2; rm *.3

  # Make additional scripts
  cat > mits-cpm22 <<EOL
#!/bin/sh
#
rm -f disks/drive[abcd].dsk
ln disks/library/mits-cpm22-56k.dsk disks/drivea.dsk
ln disks/library/mits-cpm-tools.dsk disks/drivec.dsk
#
./altairsim -x dbl.hex $*
EOL
  chmod +x mits-cpm22

  cat > mits-cpm14 <<EOL
#!/bin/sh
#
rm -f disks/drive[abcd].dsk
ln disks/library/mits-cpm14-24k.dsk disks/drivea.dsk
ln disks/library/mits-cpm-tools.dsk disks/drivec.dsk
#
./altairsim -x dbl.hex $*
EOL
  chmod +x mits-cpm14

  cat > mits-dos <<EOL
#!/bin/sh
#
rm -f disks/drive[a].dsk
ln disks/library/mits-dos.dsk disks/drivea.dsk
#
./altairsim -x dbl.hex $*
EOL
  chmod +x mits-dos

  # Update scripts; note: "boot" fails due to irregular structure
  for a in boot cpm13 cpm14 cpm22 mits-cpm22 mits-cpm14 mits-dos ucsd; do update-script $a; done
   
  cd $zloc
}

function imsai_additional {
  mkdir -p $zloc/imsaisim/; cd $zloc/imsaisim/

  echo ""
  echo "--------------------------"
  echo "Fetching Firmware         "
  echo "--------------------------"
  echo ""
  for mits in mpu-a-rom mpu-b-rom viofm1 tarbboot memon80; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "---------------------------"
  echo "Fetching BASIC interpreters"
  echo "---------------------------"
  echo ""
  for mits in basic4k basic8k xybasic; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "------------------------------------"
  echo "Fetching various standalone software"
  echo "------------------------------------"
  echo ""
  for mits in microchess scs1 bit lightdemo kscope life imsai-boot imsai-bios; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "-----------------"
  echo "Fetching CP/M 1.3"
  echo "-----------------"
  echo ""
  for mits in imsai-cpm13 um-cpm13 imgen; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "-----------------"
  echo "Fetching CP/M 2.2"
  echo "-----------------"
  echo ""
  for mits in cpm22; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "-----------------"
  echo "Fetching IMDOS   "
  echo "-----------------"
  echo ""
  for mits in imdos202 imdos205r0 imdos205r1-maslin imdos205r1-peters ; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "----------------------------"
  echo "Fetching CP/M-IMDOS software"
  echo "----------------------------"
  echo ""
  for mits in f80-305 f80-31 vmode chargen vbasic vio-stuff ws092 ws30 enchanter; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "-------------------------"
  echo "Fetching UCSD p-System IV"
  echo "-------------------------"
  echo ""
  for mits in ucsd-iv srcucsd-iv; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  # Clean up
  rm robots.*; rm *.1; rm *.2; rm *.3

  # Update scripts
  for a in cpm22 imdos202 imdos205r1-maslin imdos205r1-peters imsai-cpm13 ucsd um-cpm13; do update-script $a; done
   
  cd $zloc
}

function cromemco_additional {
  mkdir -p $zloc/cromemcosim/; cd $zloc/cromemcosim/

  # fetch files
  echo ""
  echo "--------------------------"
  echo "Fetching Cromemco firmware"
  echo "--------------------------"
  echo ""
  for mits in z1mon-1.0 rdos1 rdos252 rdos0312 mbc; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "-----------------------------------"
  echo "Fetching Cromemco Operating Systems"
  echo "-----------------------------------"
  echo ""
  for mits in cpm22 itc-cpm micah-cpm cdos00205 cdos1075 cdos2368 cdos2585 cdos2588 drivers cromix1127 cromix_work; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "------------------------"
  echo "Fetching Cromix Software"
  echo "------------------------"
  echo ""
  for mits in z80cc51 cromixprogs; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "----------------------"
  echo "Fetching CDOS Software"
  echo "----------------------"
  echo ""
  for mits in asmb31 fortran sbasic cobol lisp tools dazzler_graphics dazzler_stuff; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  echo ""
  echo "----------------------------"
  echo "Fetching Standalone Software"
  echo "----------------------------"
  echo ""
  for mits in microchess kscope dzmation life dazzlechess dz-8080 4dtictactoe dazzlerwriter spacewar tankwar chase track; do
     wget -r -l1 -np -nd "https://www.autometer.de/unix4fun/z80pack/ftp/cromemco" -A "$mits.*"
     [ -f $mits.tgz ] && { tar -xzvf $mits.tgz; rm $mits.tgz; }
   done

  rm robots.*; rm *.1; rm *.2; rm *.3

  # Update scripts
  for a in cdos2368 cdos2585 cdos2588 cpm2 cromix ; do update-script $a; done
   
  cd $zloc
}

function build()     {
  component=$1
  echo ""
  echo " ------------------------------ "
  echo "   Building $component          "
  echo " ------------------------------ "
  echo ""
  [ -d $zloc/$component/ ] && cd $zloc/$component/
  [ -d srcsim/           ] && { cd srcsim        ; [ -f Makefile.$osenv ] && cp Makefile.$osenv Makefile   ; make                                     ; make clean                          ; }
  [ -d srctools/         ] && { cd srctools      ; [ -f Makefile.$osenv ] && cp Makefile.$osenv Makefile   ; make                                     ; make clean                          ; }
  [ -f frontpanel.h      ] && {                    [ -f Makefile.$osenv ] && cp Makefile.$osenv Makefile   ; make; sudo cp libfrontpanel.so $sharedlib; make clean                          ; }
  [ -d cpmtools-2.20/    ] && { cd cpmtools-2.20 ; ./configure                                             ; make                                     ; make clean                          ; mkdir -p ~/bin; for a in cpmls cpmrm cpmcp cpmchmod cpmchattr mkfs.cpm fsck.cpm fsed.cpm; do [ -f $a ] && cp $a ~/bin; done; }
  [ -d civetweb/         ] && { cd civetweb      ;                                                           make; cp libcivetweb.a $zloc             ; make clean; mv $zloc/libcivetweb.a .; }
  [ -d disks/            ] && { [ -d disks/ ] && { mkdir -p backups ; [ -d disks/library/ ] && cp -r disks/library/* backups/ || cp -r disks/* backups/; mv backups/ disks/; }; }

  # Cleanup
  # [ -d $zloc/$component/ ] && cd $zloc/$component/
  # rm -r src*
  # rm cpmtools*
  
  cd $zloc
}

function cromemcosim { build cromemcosim; cromemco_additional; }
function imsaisim    { [ -d webfrontend ] && build webfrontend; build imsaisim; imsai_additional; }
function cpmsim      { build cpmsim; cpmsim_additional; }
function mosteksim   { build mosteksim; }
function cpmtools    { getcpmtools; build cpmtools; }
function altairsim   { build frontpanel; build altairsim; altair_additional; } # frontpanel is required for altairsim

function mainstuff {
  check_dependencies
  getzpack
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|                    SYSTEM COMPONENTS                     |"
    echo "| A) CP/M emulation (cpmsim)                               |"
    echo "| B) Altair emulation (altairsim)                          |"
    echo "| C) Cromemco emulation (cromemcosim)                      |"
    echo "| D) IMSAI emulation (imsaisim)                            |"
    [ -d $zloc/mosteksim ] && \
    echo "| E) Mostek emulation (mosteksim)                          |"
    echo "| F) CP/M Tools v2.20 (cpmtools)                           |"
    echo "|                                                          |"
    echo "| Z) All of the above                                      |"
    echo "+----------------------------------------------------------+"
    echo "  Ready to install Z80Pack $zver to $zloc                   "
    read -p "Choose a component (Q to exit): " a

    case $a in
      A|a) cpmsim      ;;
      B|b) altairsim   ;;
      C|c) cromemcosim ;;
      D|d) imsaisim    ;;
      E|e) mosteksim   ;;
      F|f) cpmtools    ;;
      Z|z) for a in cpmsim altairsim cromemcosim imsaisim mosteksim cpmtools; do $a; done ;;
      Q|q) break       ;;
      *)               ;;
    esac
  done
}

# ======================================================================================= #
#                                                                                         #
#                                      MAIN MENU                                          #
#                                                                                         #
# ======================================================================================= #

function warning {

    echo "+----------------------------------------------------------+"
    echo "|                         WARNING!                         |"
    echo "|                                                          |"
    echo "|              ------------------------------              |"
    echo "|        If you continue, this script will happily         |"
    echo "|         overwrite any data you currently have.           |"
    echo "|              ------------------------------              |"
    echo "|                                                          |"
    echo "| If you're not OK with that, select 'Q' to quit now and   |"
    echo "| back up your data. Only continue if you're sure your     |"
    echo "| data is safe.                                            |"
    echo "|                                                          |"
    echo "|        Choose wisely. This is your only warning.         |"
    echo "+----------------------------------------------------------+"
}

function mainmenu {
  while :
  do
    echo "+----------------------------------------------------------+"
    echo "|                 Z80Pack $zver Installation              |"
    echo "|                                                          |"
    echo "| A) Install Z80Pack base system (may take a while).       |"
    echo "| B) Install additional software and components.           |"
    echo "+----------------------------------------------------------+"
    read -p "Choose base system or components (Q to return): " a

    case $a in
      A|a) mainstuff  ;;
      B|b) otherstuff ;;
      Q|q) break      ;;
      *)              ;;
    esac
  done
}

warning
params $*             # Read in command line parameters
mainmenu              # And go!

echo " ------------------------------ "
echo " Z80Pack Installation Complete  "
echo " ------------------------------ "

exit 0
